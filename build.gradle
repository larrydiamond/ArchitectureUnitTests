plugins {
	id 'java'
    id "org.sonarqube" version "6.1.0.5360"
	id 'jacoco'
	id "org.owasp.dependencycheck" version "12.1.1"
    id 'signing'
    id 'maven-publish'
    id("org.openrewrite.rewrite") version("7.5.0")
}

group = 'com.ldiamond'
version = '4.0.1'
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url = uri('https://repo.spring.io/milestone') }
	maven { url = uri('https://repo.spring.io/snapshot') }
}

dependencies {
	implementation 'com.tngtech.archunit:archunit-junit5:1.4.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.12.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.12.2'

    // Needed to test JPA_COHESION_RESTFUL_GET_MAPPINGS - when Java 17 has a higher market share we will upgrade to Java 17 and upgrade the Spring Dependency to latest
    testCompileOnly 'org.springframework:spring-context:5.3.39'
    testCompileOnly 'org.springframework:spring-web:5.3.39'
    testCompileOnly 'jakarta.persistence:jakarta.persistence-api:3.2.0'

	rewrite("org.openrewrite.recipe:rewrite-testing-frameworks:3.6.1")
	rewrite("org.openrewrite.recipe:rewrite-static-analysis:2.7.1")
	rewrite("org.openrewrite.recipe:rewrite-migrate-java:3.7.0")
}

tasks.named('test') {
	useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.projectKey", "larrydiamond_ArchitectureUnitTests"
		property "sonar.organization", "larrydiamond-github"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.scm.disabled", "true"
    }
}

// gradle rewriteRun
rewrite {
	activeRecipe("org.openrewrite.java.testing.archunit.ArchUnit0to1Migration")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertEqualsBooleanToAssertBoolean")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertEqualsNullToAssertNull")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertFalseEqualsToAssertNotEquals")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertFalseNegationToAssertTrue")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertFalseNullToAssertNotNull")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertLiteralBooleanToFailRecipe")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertNotEqualsBooleanToAssertBoolean")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertTrueComparisonToAssertEquals")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertTrueEqualsToAssertEquals")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertTrueNegationToAssertFalse")
	activeRecipe("org.openrewrite.java.testing.cleanup.AssertTrueNullToAssertNull")
	activeRecipe("org.openrewrite.java.testing.junit5.CleanupAssertions")
	activeRecipe("org.openrewrite.java.testing.junit5.RemoveTryCatchFailBlocks")
	
	activeRecipe("org.openrewrite.staticanalysis.AtomicPrimitiveEqualsUsesGet")
	activeRecipe("org.openrewrite.staticanalysis.BooleanChecksNotInverted")
	activeRecipe("org.openrewrite.staticanalysis.BufferedWriterCreationRecipes")
	activeRecipe("org.openrewrite.staticanalysis.CaseInsensitiveComparisonsDoNotChangeCase")
	activeRecipe("org.openrewrite.staticanalysis.CatchClauseOnlyRethrows")
	activeRecipe("org.openrewrite.staticanalysis.NoEmptyCollectionWithRawType")
	activeRecipe("org.openrewrite.staticanalysis.EqualsAvoidsNull")
	activeRecipe("org.openrewrite.staticanalysis.IndexOfReplaceableByContains")
	activeRecipe("org.openrewrite.staticanalysis.IsEmptyCallOnCollections")
	activeRecipe("org.openrewrite.staticanalysis.ReplaceThreadRunWithThreadStart")
	activeRecipe("org.openrewrite.staticanalysis.ReplaceWeekYearWithYear")
	activeRecipe("org.openrewrite.staticanalysis.StringLiteralEquality")
	activeRecipe("org.openrewrite.staticanalysis.UnnecessaryPrimitiveAnnotations")
	activeRecipe("org.openrewrite.staticanalysis.WriteOctalValuesAsDecimal")

	activeRecipe("org.openrewrite.java.migrate.CastArraysAsListToList")
	activeRecipe("org.openrewrite.java.migrate.guava.NoGuavaJava11")
	activeRecipe("org.openrewrite.java.migrate.guava.NoGuavaDirectExecutor")
	activeRecipe("org.openrewrite.java.migrate.guava.NoGuavaListsNewArrayList")
	activeRecipe("org.openrewrite.java.migrate.guava.NoGuavaMapsNewHashMap")
	activeRecipe("org.openrewrite.java.migrate.guava.PreferJavaUtilCollectionsSynchronizedNavigableMap")
	activeRecipe("org.openrewrite.java.migrate.guava.PreferJavaUtilOptional")
	activeRecipe("org.openrewrite.java.migrate.jacoco.UpgradeJaCoCo")
	activeRecipe("org.openrewrite.java.migrate.lang.StringRulesRecipes")
	activeRecipe("org.openrewrite.java.migrate.lang.UseStringIsEmptyRecipe")
	activeRecipe("org.openrewrite.java.migrate.ThreadStopDestroy")
	activeRecipe("org.openrewrite.java.migrate.util.IteratorNext")
	activeRecipe("org.openrewrite.java.migrate.util.JavaUtilAPIs")
	activeRecipe("org.openrewrite.java.migrate.util.ListFirstAndLast")
	activeRecipe("org.openrewrite.java.migrate.util.OptionalNotEmptyToIsPresent")
	activeRecipe("org.openrewrite.java.migrate.util.OptionalNotPresentToIsEmpty")
	activeRecipe("org.openrewrite.java.migrate.util.OptionalStreamRecipe")
	activeRecipe("org.openrewrite.java.migrate.util.UseEnumSetOf")
	activeRecipe("org.openrewrite.java.migrate.util.UseLocaleOf")
	activeRecipe("org.openrewrite.java.migrate.util.UseMapOf")

	setExportDatatables(true)
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

publishing {

    repositories {

        maven {
            name = 'myRepo'
            url = layout.buildDirectory.dir("repo")
        }

        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            
            name = "OSSRH"
            url = isReleaseVersion ? releaseRepo : snapshotRepo

            allowInsecureProtocol = false
            
            credentials {
                username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = 'architectureunittests'
            from components.java
            pom {
                name = 'architectureunittests'
                description = 'An opinionated set of reasonable common sense ArchUnit tests safe to use on all projects to reduce defects and keep code maintainable.'
                inceptionYear='2024'
                url = 'https://github.com/larrydiamond/architectureunittests'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'ldiamond'
                        name = 'Larry Diamond'
                        email = 'ldiamond@ldiamond.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/larrydiamond/architectureunittests.git'
                    developerConnection = 'scm:git:ssh://github.com:larrydiamond/architectureunittests.git'
                    url = 'https://github.com/larrydiamond/architectureunittests'
                }
            }
        }

    }
}

/* only needed when building release version */
signing {
    useGpgCmd()
    sign configurations.runtimeElements
    sign publishing.publications.mavenJava
}

publishMavenJavaPublicationToMavenLocal.dependsOn signRuntimeElements
publish.dependsOn signRuntimeElements
publishMavenJavaPublicationToOSSRHRepository.dependsOn signRuntimeElements
publishMavenJavaPublicationToMyRepoRepository.dependsOn signRuntimeElements
/* */